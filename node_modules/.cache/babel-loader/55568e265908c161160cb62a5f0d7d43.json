{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport { oneOf, string, func, bool, number } from \"prop-types\";\nimport Alert from \"./alert\";\nimport { ENTER_TIMEOUT, EXIT_TIMEOUT } from \"./container\";\n\nvar AlertTimer = function (_Component) {\n  _inherits(AlertTimer, _Component);\n\n  function AlertTimer(props) {\n    _classCallCheck(this, AlertTimer);\n\n    return _possibleConstructorReturn(this, (AlertTimer.__proto__ || Object.getPrototypeOf(AlertTimer)).call(this, props));\n  }\n\n  _createClass(AlertTimer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setupTimer(this.props.timeout, this.props.onDismiss);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.timeout != prevProps.timeout || this.props.onDismiss != prevProps.onDismiss) {\n        this.setupTimer(this.props.timeout, this.props.onDismiss);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // need to clean up after ourselves\n      this.setupTimer();\n    }\n  }, {\n    key: \"setupTimer\",\n    value: function setupTimer(timeout, onDismiss) {\n      if (!timeout || !onDismiss) {\n        // clear any timer we currently have\n        clearTimeout(this.timer);\n        this.timer = null;\n        this.timerTimeout = null;\n      } else {\n        if (this.timer && this.timerTimeout != timeout) {\n          // the timeout value has changed, setup a new timer\n          clearTimeout(this.timer);\n          this.timer = null;\n        } // add new timer if we don't already have one\n\n\n        if (!this.timer) {\n          this.timer = setTimeout(this.dismissAlert.bind(this, onDismiss), timeout + ENTER_TIMEOUT + EXIT_TIMEOUT);\n          this.timerTimeout = timeout;\n        }\n      }\n    }\n  }, {\n    key: \"dismissAlert\",\n    value: function dismissAlert(onDismiss) {\n      // clear the timer if it hasn't fired yet\n      clearTimeout(this.timer); // we don't need to keep track of any timers for this alert anymore\n\n      this.timer = null;\n      this.timerTimeout = null; // actually dismiss the alert\n\n      onDismiss();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var onDismiss = this.props.onDismiss ? this.dismissAlert.bind(this, this.props.onDismiss) : null;\n      return React.createElement(Alert, _extends({}, this.props, {\n        onDismiss: onDismiss\n      }));\n    }\n  }]);\n\n  return AlertTimer;\n}(Component);\n\nexport default AlertTimer;\nexport var PropTypes = {\n  type: oneOf([\"info\", \"success\", \"warning\", \"danger\"]),\n  headline: string,\n  onDismiss: func,\n  dismissTitle: string,\n  showIcon: bool,\n  timeout: number\n};\nAlertTimer.propTypes = PropTypes;","map":null,"metadata":{},"sourceType":"module"}