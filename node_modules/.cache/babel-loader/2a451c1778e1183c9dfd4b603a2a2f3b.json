{"ast":null,"code":"import _defineProperty from \"/home/dev/ictu/Machinelearning/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initState = {\n  trangthai: false,\n  content: {}\n};\n\nconst reducer2 = (state = initState, action) => {\n  switch (action.type) {\n    case 'CHANGER_INFO':\n      return _objectSpread({}, state, {\n        trangthai: !state.trangthai\n      });\n\n    case 'GET_DATA':\n      return _objectSpread({}, state, {\n        content: action.gettion\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer2;","map":{"version":3,"sources":["/home/dev/ictu/Machinelearning/src/reducers/reducer2.js"],"names":["initState","trangthai","content","reducer2","state","action","type","gettion"],"mappings":";;;;;;AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAE,KADG;AAEdC,EAAAA,OAAO,EAAG;AAFI,CAAlB;;AAKA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGJ,SAAT,EAAoBK,MAApB,KAA+B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACA,+BAAUF,KAAV;AAAgBH,QAAAA,SAAS,EAAC,CAACG,KAAK,CAACH;AAAjC;;AACA,SAAK,UAAL;AACA,+BAAUG,KAAV;AAAgBF,QAAAA,OAAO,EAACG,MAAM,CAACE;AAA/B;;AACA;AACI,aAAOH,KAAP;AANR;AAQH,CATD;;AAWA,eAAeD,QAAf","sourcesContent":["const initState = {\n    trangthai: false,\n    content : {},\n}\n\nconst reducer2 = (state = initState, action) => {\n    switch (action.type) {\n        case 'CHANGER_INFO':\n        return{...state,trangthai:!state.trangthai}\n        case 'GET_DATA':\n        return{...state,content:action.gettion}\n        default:\n            return state;\n    }\n};\n\nexport default reducer2;\n"]},"metadata":{},"sourceType":"module"}